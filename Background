module vga_demo(CLOCK_50, SW, KEY, VGA_R, VGA_G, VGA_B, VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N, VGA_CLK, HEX3, HEX2, HEX1, HEX0,  LEDR);
	
	input CLOCK_50;	
	input [9:0] SW; //SW[9] for reset
	input [3:0] KEY; //directional inputs
	output [6:0] HEX3, HEX2, HEX1, HEX0;
	output [7:0] VGA_R;
	output [7:0] VGA_G;
	output [7:0] VGA_B;
	output VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N, VGA_CLK;
	output [9:0] LEDR; //showing debounced outputs
	
	wire [3:0] debounced_keys;
	wire perfect_hit;
	
	// Instantiate input processing module
   input_processing input_proc(
		.CLOCK_50(CLOCK_50),
      .KEY(KEY),
      .SW(SW),
      .LEDR(LEDR),
		.a_out(debounced_keys));
	
	// Instantiate score tracking module
	score_tracker tracker_inst(
		.CLOCK_50(CLOCK_50),   // System clock
      .reset(SW[9]),         // Reset signal (connected to a KEY)
      .key_press(debounced_keys),       // Push button inputs (KEY)
      .perfect_hit(perfect_hit),
		.HEX0(HEX0),           // Output to HEX displays
      .HEX1(HEX1),
      .HEX2(HEX2),
      .HEX3(HEX3));
	
	//Instantiate arrow game module
	/*arrow_game game_inst(
		.CLOCK_50(CLOCK_50),
      .reset(SW[9]),
      .key_press(debounced_keys),
      .VGA_R(VGA_R),
      .VGA_G(VGA_G),
      .VGA_B(VGA_B),
      .VGA_HS(VGA_HS),
      .VGA_VS(VGA_VS),
      .VGA_BLANK_N(VGA_BLANK_N),
      .VGA_SYNC_N(VGA_SYNC_N),
      .VGA_CLK(VGA_CLK),
      .perfect_hit(perfect_hit));*/
	
	vga_adapter VGA(
		.resetn(KEY[0]),
		.clock(CLOCK_50),
		.colour(VGA_COLOR),
		.x(VGA_X),
		.y(VGA_Y),
		.plot(plot),
		.VGA_R(VGA_R),
		.VGA_G(VGA_G),
		.VGA_B(VGA_B),
		.VGA_HS(VGA_HS),
		.VGA_VS(VGA_VS),
		.VGA_BLANK_N(VGA_BLANK_N),
		.VGA_SYNC_N(VGA_SYNC_N),
		.VGA_CLK(VGA_CLK));
		
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "background.mif";

endmodule


//Input Processing Module
module input_processing(
	input CLOCK_50,		// DE1-SoC 50MHz clock
   input [3:0] KEY,		// KEY[3:0] for directional inputs (active low)
								// KEY[3] = up, KEY[2] = down, KEY[1] = left, KEY[0] = right
   input [9:0] SW,		// SW[9] used for reset
   output [9:0] LEDR,		// LEDR[3:0] shows debounced outputs
	output reg [3:0] a_out	//Debounced outputs for external use
);
	
	// Parameters
   parameter DB = 1_000_000;  // 20ms at 50MHz (50M * 0.02)
   
   // Internal signals
   wire [3:0] a_in;          // Inputs after active-low conversion
   reg [3:0] a_led;          // LED outputs
   wire reset;               // Reset signal
    
   // Convert active-low KEY inputs to active-high
   assign a_in = ~KEY[3:0];
   
   // Use SW[9] for reset
   assign reset = SW[9];
    
   // Connect internal LED signals to actual LEDs
   assign LEDR[3:0] = a_led;
   assign LEDR[9:4] = 6'b0;  // Turn off unused LEDs
    
   // Synchronizer registers
   reg [3:0] a_sync1, a_sync2;  // Two flip-flops for synchronization
    
   // Debounce counters - one for each button
   reg [19:0] a_count [3:0];  // 20 bits for counting to 1M
    
   // Current button states
   reg [3:0] a_state;
    
   // Two-stage synchronizer
   always @(posedge CLOCK_50)
	begin
		a_sync1 <= a_in;
      a_sync2 <= a_sync1;
   end
    
   // Debouncing and output logic
   integer i;
    
   always @(posedge CLOCK_50)
	begin
	if (reset)
	begin
		a_out <= 4'b0;
      a_led <= 4'b0;
      a_state <= 4'b0;
            
      for (i = 0; i < 4; i = i + 1)
		begin
			a_count[i] <= 20'd0;
      end
	end
   else
	begin
	// Check each button
	for (i = 0; i < 4; i = i + 1)
	begin
		if (a_sync2[i] != a_state[i])
		begin // Current state != previous state
			if (a_count[i] < DB)
				a_count[i] <= a_count[i] + 1'b1;
			else
			begin // Button pressed for enough time
				a_state[i] <= a_sync2[i];
            a_out[i] <= a_sync2[i];
            a_led[i] <= a_sync2[i];
            a_count[i] <= 20'd0;
			end
		end
      else
			a_count[i] <= 20'd0;  // Reset counter, no change
	end
	end
	end
endmodule

module score_tracker (
    input CLOCK_50,
    input reset,
    input [3:0] key_press,
    input perfect_hit,         // New input for arrow hits
    output reg [6:0] HEX0,
    output reg [6:0] HEX1,
    output reg [6:0] HEX2,
    output reg [6:0] HEX3
);

    // Internal score counter (0-99)
    reg [7:0] score;
    reg [3:0] prev_keys;

    // 7-segment display patterns (keep your existing patterns)
    reg [6:0] seg7 [0:9];
    initial begin
        seg7[0] = 7'b1000000;  // 0
        seg7[1] = 7'b1111001;  // 1
        seg7[2] = 7'b0100100;  // 2
        seg7[3] = 7'b0110000;  // 3
        seg7[4] = 7'b0011001;  // 4
        seg7[5] = 7'b0010010;  // 5
        seg7[6] = 7'b0000010;  // 6
        seg7[7] = 7'b1111000;  // 7
        seg7[8] = 7'b0000000;  // 8
        seg7[9] = 7'b0010000;  // 9
    end

    // Modified score update logic
    always @(posedge CLOCK_50 or posedge reset) begin
        if (reset) begin
            score <= 8'd0;
            prev_keys <= 4'b0;
        end
        else begin
            if (perfect_hit && score < 8'd99) begin
                score <= score + 1;
            end
            prev_keys <= key_press;
        end
    end

    // Display update logic (keep your existing logic)
    always @(posedge CLOCK_50) begin
        HEX0 <= seg7[score % 10];
        HEX1 <= seg7[score / 10];
        HEX2 <= 7'b1111111;
        HEX3 <= 7'b1111111;
    end

endmodule

/*
module arrow_game(
    input CLOCK_50,
    input reset,
    input [3:0] key_press,
    output [7:0] VGA_R,
    output [7:0] VGA_G,
    output [7:0] VGA_B,
    output VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N, VGA_CLK,
    output reg perfect_hit
);

    // Parameters for arrow dimensions and position
    parameter ARROW_WIDTH = 15;
    parameter ARROW_HEIGHT = 15;
    parameter SCREEN_WIDTH = 160;
    parameter SCREEN_HEIGHT = 120;
    parameter TARGET_Y = 100;
    parameter HIT_RANGE = 5;
    
    // VGA signals
    wire [7:0] VGA_X;
    wire [6:0] VGA_Y;
    reg [2:0] color;
    reg plot;
    
    // Arrow state
    reg [7:0] arrow_x = 72;  // Center the arrow ((160 - 15) >> 1)
    reg [6:0] arrow_y;
    reg arrow_active;
    reg [19:0] move_counter;
    
    // Arrow movement control
    parameter MOVE_SPEED = 250000;
    
    // Game state management
    always @(posedge CLOCK_50 or posedge reset) begin
        if (reset) begin
            arrow_y <= 0;
            move_counter <= 0;
            arrow_active <= 1;
            perfect_hit <= 0;
        end
        else begin
            perfect_hit <= 0;
            
            if (key_press[3] && arrow_active) begin
                if (arrow_y >= (TARGET_Y - HIT_RANGE) && 
                    arrow_y <= (TARGET_Y + HIT_RANGE)) begin
                    arrow_active <= 0;
                    perfect_hit <= 1;
                end
            end
            
            if (move_counter == MOVE_SPEED) begin
                move_counter <= 0;
                if (arrow_active) begin
                    if (arrow_y >= SCREEN_HEIGHT) begin
                        arrow_y <= 0;
                    end
                    else begin
                        arrow_y <= arrow_y + 1;
                    end
                end
                else begin
                    arrow_y <= 0;
                    arrow_active <= 1;
                end
            end
            else begin
                move_counter <= move_counter + 1;
            end
        end
    end
    
    // Arrow pixel pattern - simplified for better visibility
    function is_arrow_pixel;
        input [7:0] px;
        input [6:0] py;
        begin
            // Simplified arrow design
            if (py < ARROW_HEIGHT && px < ARROW_WIDTH) begin
                // Arrow shaft (vertical line)
                if (px >= 7 && px <= 8 && py >= 5)
                    is_arrow_pixel = 1;
                // Arrow head (triangle)
                else if ((px == 7 && py == 0) ||                     // Tip
                        (px >= 6 && px <= 9 && py == 1) ||           // Middle
                        (px >= 5 && px <= 10 && py == 2) ||          // Base
                        (px >= 4 && px <= 11 && py == 3))            // Widest
                    is_arrow_pixel = 1;
                else
                    is_arrow_pixel = 0;
            end
            else
                is_arrow_pixel = 0;
        end
    endfunction
    
    // Color assignment logic
    always @(*) begin
        color = 3'b000;  // Default black background
        plot = 1'b1;     // Always plotting
        
        // Draw target line
        if (VGA_Y == TARGET_Y) begin
            color = 3'b001;  // Blue
        end
        
        // Draw arrow if active
        if (arrow_active && 
            VGA_X >= arrow_x && VGA_X < (arrow_x + ARROW_WIDTH) &&
            VGA_Y >= arrow_y && VGA_Y < (arrow_y + ARROW_HEIGHT)) begin
            if (is_arrow_pixel(VGA_X - arrow_x, VGA_Y - arrow_y))
                color = 3'b111;  // White
        end
    end
    
    // VGA adapter instantiation
    vga_adapter VGA(
        .resetn(!reset),
        .clock(CLOCK_50),
        .colour(color),
        .x(VGA_X),
        .y(VGA_Y),
        .plot(plot),
        .VGA_R(VGA_R),
        .VGA_G(VGA_G),
        .VGA_B(VGA_B),
        .VGA_HS(VGA_HS),
        .VGA_VS(VGA_VS),
        .VGA_BLANK_N(VGA_BLANK_N),
        .VGA_SYNC_N(VGA_SYNC_N),
        .VGA_CLK(VGA_CLK)
    );
    
    defparam VGA.RESOLUTION = "160x120";
    defparam VGA.MONOCHROME = "FALSE";
    defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
    defparam VGA.BACKGROUND_IMAGE = "black.mif";

endmodule*/
