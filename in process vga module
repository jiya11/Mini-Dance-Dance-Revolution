module arrow_game(
    input CLOCK_50,
    input reset,
    input [3:0] key_press,
    output [7:0] VGA_R,
    output [7:0] VGA_G,
    output [7:0] VGA_B,
    output VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N, VGA_CLK,
    output reg perfect_hit
);

    // VGA signals
    reg [7:0] x_pos;
    reg [6:0] y_pos;
    wire [7:0] x;
    wire [6:0] y;
    
    // Simple pattern to verify display is working
    reg [2:0] pixel_color;
    
    // Generate a simple test pattern
    always @(*) begin
        // Default to black
        pixel_color = 3'b000;
        
        // Draw a white rectangle in the middle of the screen
        if (x >= 70 && x <= 90 && y >= 50 && y <= 70) begin
            pixel_color = 3'b111;  // White
        end
        
        // Draw the blue target line
        if (y == 100) begin
            pixel_color = 3'b001;  // Blue
        end
        
        // Draw red borders to see screen boundaries
        if (x == 0 || x == 159 || y == 0 || y == 119) begin
            pixel_color = 3'b100;  // Red
        end
    end
    
    // Instantiate VGA adapter
    vga_adapter #(
        .RESOLUTION("160x120"),
        .MONOCHROME("FALSE"),
        .BITS_PER_COLOUR_CHANNEL(1),
        .BACKGROUND_IMAGE("black.mif")
    ) VGA(
        .resetn(!reset),
        .clock(CLOCK_50),
        .colour(pixel_color),
        .x(x),
        .y(y),
        .plot(1'b1),
        .VGA_R(VGA_R),
        .VGA_G(VGA_G),
        .VGA_B(VGA_B),
        .VGA_HS(VGA_HS),
        .VGA_VS(VGA_VS),
        .VGA_BLANK_N(VGA_BLANK_N),
        .VGA_SYNC_N(VGA_SYNC_N),
        .VGA_CLK(VGA_CLK)
    );

endmodule
